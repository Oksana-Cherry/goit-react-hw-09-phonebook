{"version":3,"sources":["redux/auth/auth-actions.js","redux/auth/auth-operations.js","redux/auth/auth-reducer.js","redux/auth/auth-selectors.js","components/Navigation/Navigation.module.css","components/AuthNav/AuthNav.module.css","components/UserMenu/UseMenu.module.css","redux/contacts/contact-actions.js","redux/contacts/contect-operations.js","redux/contacts/contact-selectors.js","redux/contacts/contact-reducer.js","components/Container/Container.js","components/Container/Container.module.css","components/AppBar/AppBar.module.css","redux/store.js","routes.js","components/Navigation/Navigation.js","components/UserMenu/default-avatar.png","components/UserMenu/UserMenu.js","components/AuthNav/AuthNav.js","components/AppBar/AppBar.js","components/PrivateRoute.js","components/PublicRoute.js","App.js","index.js"],"names":["registerRequest","createAction","registerSuccess","registerError","loginRequest","loginSuccess","loginError","logoutRequest","logoutSuccess","logoutError","getCurrentUserRequest","getCurrentUserSuccess","getCurrentUserError","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","a","authActions","post","response","data","message","logIn","logOut","getCurrentUser","getState","persistedToken","auth","get","initialUserState","name","email","user","createReducer","_","payload","error","isAuthenticated","combineReducers","getIsAuthenticated","state","getUserName","module","exports","fetchContactRequrest","fetchContactSuccess","fetchContactError","addContactRequrest","addContactSuccess","addContactError","deleteContactRequrest","deleteContactSuccess","deleteContactError","changeFilterName","contactsOperations","fetchContact","then","catch","addContact","number","contact","deleteContact","id","delete","getContacts","contacts","items","getFilter","filter","contactsSelectors","getLoding","loading","getError","getVisibleContact","createSelector","console","log","normalizedFilter","toLowerCase","includes","Container","children","className","styles","defaultProps","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","persistReducer","authReducer","contactReducer","devTools","process","persistor","persistStore","routes","home","login","Navigation","useSelector","authSelectors","to","exact","link","activeClassName","activeLink","UserMenu","useDispatch","onLogout","useCallback","authOperations","container","src","Avatar","alt","width","avatar","Button","type","variant","color","onClick","AuthNav","AppBar","header","PrivateRoute","redirectTo","routeProps","PublicRoute","restricted","HomePage","lazy","RegisterPage","LoginPage","ContactsPage","App","useEffect","fallback","path","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.167a0636.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\n/*const authActions = {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\nexport default authActions;*/\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};\r\n","import axios from 'axios';\r\nimport authActions from './auth-actions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n// eslint-disable-next-line\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\n/*const register = credentials => dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n  axios.post('/users/signup', credentials);\r\n};*/\r\n/*POST @ /users/signup\r\n * body { name, email, password }*/\r\nconst register = credentials => async dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  try {\r\n    const response = await axios.post('/users/signup', credentials);\r\n\r\n    //console.log(response);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.registerSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.registerError(error.message));\r\n  }\r\n};\r\n// axsios.post('/');\r\nconst logIn = credentials => async dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n  try {\r\n    const response = await axios.post('/users/login', credentials);\r\n    // console.log(response);\r\n\r\n    token.set(response.data.token);\r\n    dispatch(authActions.loginSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.loginError(error.message));\r\n  }\r\n};\r\n\r\nconst logOut = () => async dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n  try {\r\n    await axios.post('/users/logout');\r\n\r\n    token.unset();\r\n    dispatch(authActions.logoutSuccess());\r\n  } catch (error) {\r\n    dispatch(authActions.logoutError(error.message));\r\n  }\r\n};\r\n\r\nconst getCurrentUser = () => async (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  try {\r\n    const response = await axios.get('/users/current');\r\n\r\n    dispatch(authActions.getCurrentUserSuccess(response.data));\r\n  } catch (error) {\r\n    dispatch(authActions.getCurrentUserError(error.message));\r\n  }\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default { register, logIn, logOut, getCurrentUser };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './auth-actions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user, //user,token, пришли c authOperations response.data\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n//const setError = (_,{ payload }) => payload;//можно абстрагировать\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (_, { payload }) => payload,\r\n  [authActions.loginError]: (_, { payload }) => payload,\r\n  [authActions.logoutError]: (_, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\r\n});\r\n\r\nconst isAuthenticated = createReducer(false, {\r\n  [authActions.registerSuccess]: () => true,\r\n  [authActions.loginSuccess]: () => true,\r\n  [authActions.getCurrentUserSuccess]: () => true,\r\n  [authActions.registerError]: () => false,\r\n  [authActions.loginError]: () => false,\r\n  [authActions.getCurrentUserError]: () => false,\r\n  [authActions.logoutSuccess]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  isAuthenticated,\r\n  token,\r\n  error,\r\n});\r\n/*{\r\n  \"name\": \"Adrian Cross\",\r\n  \"email\": \"across@mail.com\",\r\n  \"password\": \"examplepassword\"\r\n}*/\r\n","const getIsAuthenticated = state => state.auth.isAuthenticated;\r\n\r\nconst getUserName = state => state.auth.user.name;\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n  getIsAuthenticated,\r\n  getUserName,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Navigation_link__1ZiGI\",\"activeLink\":\"Navigation_activeLink__1EQ7x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"AuthNav_link__2LOF0\",\"activeLink\":\"AuthNav_activeLink__1SNoi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"UseMenu_container__3Ub9W\",\"avatar\":\"UseMenu_avatar__25RID\",\"name\":\"UseMenu_name__3oulm\"};","//import { v4 as uuid } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequrest = createAction(\r\n  'contacts/fetchContactRequrest',\r\n);\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\n\r\nexport const addContactRequrest = createAction('contacts/addContactRequrest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\n//export const deleteContact = createAction('contacts/delete');\r\nexport const deleteContactRequrest = createAction(\r\n  'contacts/deleteContactRequrest',\r\n);\r\nexport const deleteContactSuccess = createAction(\r\n  'contacts/deleteContactSuccess',\r\n);\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilterName = createAction('contacts/filter');\r\n\r\n/*\r\nconst contactActions = {\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilterName,\r\n};\r\n\r\n\r\nexport default contactActions;*/\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from './contact-actions';\r\n\r\n//axios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\n/*const asyncActionCreator = args => dispatch => {\r\n  // можно диспачить http запросы\r\n};*/\r\n\r\n/*const fetchContact = () => async dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get('/todos');\r\n\r\n    dispatch(fetchContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactError(error));\r\n  }*/\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(fetchContactRequrest());\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error.message)));\r\n};\r\n\r\nconst addContact = (name, number) => dispatch => {\r\n  const contact = {\r\n    name,\r\n    number,\r\n  };\r\n  //dispatch({ type: 'contacts/addContactRequrest' });\r\n  dispatch(addContactRequrest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(\r\n      //dispatch({ type: 'contacts/addContactSuccess', paload: data }),\r\n      ({ data }) => dispatch(addContactSuccess(data)),\r\n    )\r\n    .catch(error => dispatch(addContactError(error.message)));\r\n};\r\n\r\nconst deleteContact = id => dispatch => {\r\n  dispatch(deleteContactRequrest());\r\n\r\n  axios\r\n    .delete(`/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(deleteContactSuccess(id));\r\n    })\r\n    .catch(error => dispatch(deleteContactError(error.message)));\r\n};\r\n\r\nconst contactsOperations = {\r\n  fetchContact,\r\n  addContact,\r\n  deleteContact,\r\n};\r\nexport default contactsOperations;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.items;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getLoding = state => state.contacts.loading;\r\nconst getError = state => state.contacts.error;\r\n\r\n/*const getVisibleContacts = state => {\r\n  const contacts = getContacts(state);\r\n  const filter = getFilter(state);\r\n  const normolizedFilter = filter.toLowerCase();\r\n\r\n  return contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(normolizedFilter),\r\n  );\r\n};*/\r\n//МЕМОИЗАЦИЯ\r\n/*const getNormolizedFilter = state => {\r\n  const filter = getFilter(state);\r\n\r\n  return filter.toLowerCase(state);\r\n};\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getNormolizedFilter],\r\n  (contacts, normolizedFilter) => {\r\n    debugger;\r\n    contacts.filter(contacts =>\r\n      contacts.name.toLowerCase().includes(normolizedFilter),\r\n    );\r\n  },\r\n);*/\r\n\r\nconst getVisibleContact = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    console.log('новый массив видимых контактов');\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\nconst contactsSelectors = {\r\n  getContacts,\r\n  getFilter,\r\n  getLoding,\r\n  getError,\r\n  getVisibleContact,\r\n};\r\nexport default contactsSelectors;\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n//import { contactActions } from './contact-actions';\r\nimport {\r\n  addContactRequrest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequrest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactRequrest,\r\n  fetchContactSuccess,\r\n  fetchContactError,\r\n  changeFilterName,\r\n} from './contact-actions';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilterName]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequrest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequrest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [deleteContactRequrest]: () => true,\r\n  [deleteContactSuccess]: () => false,\r\n  [deleteContactError]: () => false,\r\n});\r\nconst error = createReducer('', {\r\n  [fetchContactError]: (_, { payload }) => payload,\r\n  [addContactError]: (_, { payload }) => payload,\r\n  [deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Container.module.css';\r\n\r\n/*const Container = ({ children }) => (\r\n  <div className={styles.Container}>{children}</div>\r\n);\r\n\r\nexport default Container;*/\r\nexport default function Container({ children }) {\r\n  return <div className={styles.Container}>{children}</div>;\r\n}\r\n\r\nContainer.defaultProps = {\r\n  children: 'Here must be some text...',\r\n};\r\n\r\nContainer.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Container_Container__3OgJJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"AppBar_header__17qaa\"};","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { contactReducer } from './contacts';\r\nimport { authReducer } from './auth';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\nconst store = configureStore({\r\n  reducer: {\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n\r\n    contacts: contactReducer,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\nconst persistor = persistStore(store);\r\n\r\n// eslint-disable-next-line\r\nexport default { store, persistor };\r\n\r\n//const persistor = persistStore(store);\r\n// eslint-disable-next-line\r\n//export default { store, persistor };\r\n/*const middleware = getDefaultMiddleware =>\r\n  getDefaultMiddleware().concat(logger);\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactReducer,\r\n  },\r\n  devTools: process.env.NODE_ENV === 'development',\r\n  middleware,\r\n});*/\r\n","const routes = {\r\n  home: '/',\r\n  contacts: '/contacts',\r\n  register: '/register',\r\n  login: '/login',\r\n};\r\n\r\nexport default routes;\r\n","import React from 'react';\r\n//import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport routes from '../../routes';\r\nimport styles from './Navigation.module.css';\r\n\r\n/*const styles = {\r\n  link: {\r\n    display: 'inline-block',\r\n    textDecoration: 'none',\r\n    padding: 12,\r\n    fontWeight: 700,\r\n    color: '#2A363B',\r\n  },\r\n  activeLink: {\r\n    color: '#2b32b2',\r\n  },\r\n};*/\r\n\r\nconst { home, contacts } = routes;\r\n\r\n//const Navigation = ({ isAuthenticated }) => (\r\nexport default function Navigation() {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <nav>\r\n      <NavLink\r\n        to={home}\r\n        exact\r\n        className={styles.link}\r\n        activeClassName={styles.activeLink}\r\n      >\r\n        Home\r\n      </NavLink>\r\n\r\n      {isAuthenticated && (\r\n        <NavLink\r\n          to={contacts}\r\n          exact\r\n          className={styles.link}\r\n          activeClassName={styles.activeLink}\r\n        >\r\n          Phonebook\r\n        </NavLink>\r\n      )}\r\n    </nav>\r\n  );\r\n}\r\n/*const mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(Navigation);*/\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.e44fc4e2.png\";","//import React from 'react';\r\n//import { connect } from 'react-redux';\r\nimport { useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { authSelectors, authOperations } from '../../redux/auth';\r\nimport Avatar from './default-avatar.png';\r\nimport Button from '@material-ui/core/Button';\r\nimport styles from './UseMenu.module.css';\r\n/*const styles = {\r\n  container: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  },\r\n  avatar: {\r\n    marginRight: 4,\r\n  },\r\n  name: {\r\n    fontWeight: 700,\r\n    marginRight: 12,\r\n  },\r\n};*/\r\n\r\n//const UserMenu = ({ avatar, name, onLogout }) => (\r\n\r\nexport default function UserMenu() {\r\n  const name = useSelector(authSelectors.getUserName);\r\n  const dispatch = useDispatch();\r\n\r\n  const onLogout = useCallback(() => {\r\n    dispatch(authOperations.logOut());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <img src={Avatar} alt=\"\" width=\"32\" className={styles.avatar} />\r\n      <span className={styles.name}>Welcome, {name}</span>\r\n      <Button\r\n        type=\"button\"\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={onLogout}\r\n      >\r\n        Logout\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n/*const mapStateToProps = state => ({\r\n  name: authSelectors.getUserName(state),\r\n  avatar: defaultAvatar,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onLogout: authOperations.logOut,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UserMenu);*/\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport routes from '../../routes';\r\nimport styles from './AuthNav.module.css';\r\n\r\nconst { register, login } = routes;\r\n\r\nexport default function AuthNav() {\r\n  return (\r\n    <div>\r\n      <NavLink\r\n        to={register}\r\n        exact\r\n        className={styles.link}\r\n        activeClassName={styles.activeLink}\r\n      >\r\n        Authorization\r\n      </NavLink>\r\n      <NavLink\r\n        to={login}\r\n        exact\r\n        className={styles.link}\r\n        activeClassName={styles.activeLink}\r\n      >\r\n        Login\r\n      </NavLink>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\n//import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport Navigation from '../Navigation/Navigation';\r\nimport UserMenu from '../UserMenu/UserMenu';\r\nimport AuthNav from '../AuthNav/AuthNav';\r\nimport { authSelectors } from '../../redux/auth';\r\nimport styles from './AppBar.module.css';\r\n\r\n/*const AppBar = ({ isAuthenticated }) => (\r\n  <header className={styles.header}>\r\n    <Navigation />\r\n    {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n  </header>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\n//const mapDispatchToProps = {};\r\n\r\nexport default connect(mapStateToProps)(AppBar);*/\r\nexport default function AppBar() {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <header className={styles.header}>\r\n      <Navigation />\r\n\r\n      {isAuthenticated ? <UserMenu /> : <AuthNav />}\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n//import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут приватный и пользователь залогинен, рендерит компонент\r\n * - В противном случае рендерит Redirect на /login\r\n */\r\n/*const PrivateRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated ? <Component {...props} /> : <Redirect to={redirectTo} />\r\n    }\r\n  />\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\n\r\nexport default connect(mapStateToProps)(PrivateRoute);*/\r\nexport default function PrivateRoute({ redirectTo, children, ...routeProps }) {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isAuthenticated ? children : <Redirect to={redirectTo} />}\r\n    </Route>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\n//import { connect } from 'react-redux';\r\nimport { useSelector } from 'react-redux';\r\nimport { authSelectors } from '../redux/auth';\r\n\r\n/**\r\n * - Если маршрут ограниченный, и пользователь залогинен, рендерит редирект на /todos\r\n * - В противном случае рендерит компонент\r\n */\r\n/*const PublicRoute = ({\r\n  component: Component,\r\n  isAuthenticated,\r\n  redirectTo,\r\n  ...routeProps\r\n}) => (\r\n  <Route\r\n    {...routeProps}\r\n    render={props =>\r\n      isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        <Component {...props} />\r\n      )\r\n    }\r\n  />\r\n);\r\nconst mapStateToProps = state => ({\r\n  isAuthenticated: authSelectors.getIsAuthenticated(state),\r\n});\r\nexport default connect(mapStateToProps)(PublicRoute);*/\r\nexport default function PublicRoute({ redirectTo, children, ...routeProps }) {\r\n  const isAuthenticated = useSelector(authSelectors.getIsAuthenticated);\r\n\r\n  return (\r\n    <Route {...routeProps}>\r\n      {isAuthenticated && routeProps.restricted ? (\r\n        <Redirect to={redirectTo} />\r\n      ) : (\r\n        children\r\n      )}\r\n    </Route>\r\n  );\r\n}\r\n","import React, { useEffect, Suspense, lazy } from 'react';\r\nimport { Switch } from 'react-router-dom';\r\nimport Container from './components/Container';\r\nimport AppBar from './components/AppBar';\r\n//import { connect } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { authOperations } from './redux/auth';\r\nimport PrivateRoute from './components/PrivateRoute';\r\nimport PublicRoute from './components/PublicRoute';\r\nimport routes from './routes';\r\nconst HomePage = lazy(() => import('./pages/HomePage'));\r\nconst RegisterPage = lazy(() => import('./pages/RegisterPage'));\r\nconst LoginPage = lazy(() => import('./pages/LoginPage'));\r\nconst ContactsPage = lazy(() => import('./pages/ContactsPage'));\r\n\r\nconst { home, contacts, register, login } = routes;\r\n/*class App extends Component {\r\n  componentDidMount() {\r\n    this.props.onGetCurretnUser();\r\n  }*/\r\nconst App = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(authOperations.getCurrentUser());\r\n  }, [dispatch]);\r\n  //render() {\r\n  return (\r\n    <Container>\r\n      <AppBar />\r\n\r\n      <Suspense fallback={<div>Loading...</div>}>\r\n        <Switch>\r\n          <PublicRoute exact path={home} component={HomePage} />\r\n          <PublicRoute\r\n            path={register}\r\n            restricted\r\n            redirectTo={contacts}\r\n            component={RegisterPage}\r\n          />\r\n          <PublicRoute\r\n            exact\r\n            path={login}\r\n            restricted\r\n            redirectTo={contacts}\r\n            component={LoginPage}\r\n          />\r\n          <PrivateRoute\r\n            path={contacts}\r\n            component={ContactsPage}\r\n            redirectTo={login}\r\n          />\r\n          <PublicRoute component={HomePage} />\r\n        </Switch>\r\n      </Suspense>\r\n    </Container>\r\n  );\r\n};\r\n//}\r\n\r\n/*const mapDispatchToProps = {\r\n  onGetCurretnUser: authOperations.getCurrentUser,\r\n};\r\n\r\nexport default connect(null, mapDispatchToProps)(App);*/\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport store from './redux/store';\r\nimport App from './App';\r\nimport 'modern-normalize/modern-normalize.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store.store}>\r\n      <PersistGate loading={null} persistor={store.persistor}>\r\n        <BrowserRouter>\r\n          <App />\r\n        </BrowserRouter>\r\n      </PersistGate>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}